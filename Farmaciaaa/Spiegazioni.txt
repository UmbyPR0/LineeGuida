Creazione di un nuovo progetto:
                            app WEB ASP.NET Core(model-view-controller)
                            -account individuali
                            -configura per HttpPost
                            -non istruzioni di primo livello

Librerie necesarie:     
        -Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore     
        -Microsoft.AspNetCore.Identity.EntityFrameworkCore
        -Microsoft.AspNetCore.Identity.UI
        -Microsoft.EntityFrameworkCore.SqlServer
        -Microsoft.EntityFrameworkCore.Tools

                        
QUERY PER VEDERE IL NOME DELL’UTENTE E NOME DEL DATABASE PER COMPORRE LA QUERY PER L’ASSEGNAZIONE DEI PERMESSI NECESSARI PER LO SCAFFOLD:

USE [nomedb]; da cambiare
GO
SELECT name AS DatabaseName, suser_sname(owner_sid) AS OwnerName
FROM sys.databases
WHERE name = 'nome db';da cambiare
GO

QUERY PER ASSEGNARE I PERMESSI NECESSARI PER FARE LO SCAFFOLD:
USE [nomedb];
GO
ALTER AUTHORIZATION ON DATABASE::[nomedb] TO [nomeutenza]; da cambiare
GO


STRINGA DI CONNESSIONE:
Scaffold-DbContext "Server=(localdb)\MSSQLLocalDB;Database=Farmacie;Trusted_Connection=True;TrustServerCertificate=True;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models
	
(DA GUARDARE IL SERVER E IL NOME DEL DB)

PARTENZA DEL PROGETTO:
1)CREARE CONTROLLER:
    -Cartella controller,click destro
    -Aggiungi
    -controller MVC che usa entity framework
    
CONFIGURAZIONE
CLASSE DEL MODELLO: IN QUESTO CASO FARMACIE PERCHE E’ ‘LA TABELLA CHE UNISCE TUTTO’ CON GLI INNER JOIN,MAGARI CI SONO CASI 
CHE LE TABELLE NON SONO COLLEGATE E ALLORA BISOGNA CREARE DUE O PIU CONTROLLER.
DbContextClass: quel tipo rappresenta il DB dove andare a prendere le tabelle
 

3)CREARE LA VIEW:
CREARE UNA VISUALIZZAZIONE NELLA CARTELLA ‘Views’ CHE LA CHIAMO IN QUESTO CASO   ‘Farmacia’

E METTERE  IL CODICE
@{
    ViewData["Title"] = "Farmacie";
}
<div class="text-center">
<h1 class="display-4">Farmacie</h1>
</div>

3)PER VEDERE LE FARMACIE 
 ANDARE  SU ‘Shared/_Layout.cshtml’ 
  <li class="nav-item">
      <a class="nav-link text-dark" asp-area="" asp-controller="Farmacie" asp-action="Index">Farmacia</a>
  </li> 
asp-controller: richiamo la cartella dove ci sono le viste, in questo caso Views/Farmacie
asp-action: con questo richiami la vista creata prima ,in questo caso ‘Farmacia’


POI MODIFICARE LE COSE NELA VIEW/INDEX PER INCLUDERE TUTTI I CAMPI
4)ANDARE NEL PROGRAM E CAMBIARE IL CODICE CON QUESTO: 
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection") ?? throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(connectionString));
 
builder.Services.AddDbContext<FarmacieContext>(options =>
    options.UseSqlServer(connectionString));
 
builder.Services.AddDatabaseDeveloperPageExceptionFilter();


AGGIUNGERE ANCHE QUESTA RIGHA PER I RUOLI:.AddRoles<IdentityRole>()
5)ORDINE ALFABETICO:,  BASTA AGGIUNGERE L'ORDEBY COME IN ESEMPIO:
     public async Task<IActionResult> Index()
     {
         var bikeStoresContext = _context.Products
             .Include(p => p.Brand)
             .Include(p => p.Category)
             .OrderBy(p => p.ProductName); // CAMBIARE IL NOME

         return View(await bikeStoresContext.ToListAsync());
     }



6)QUERY PER LA RICERCA, DA METTERE DENTRO IL CONTROLLER FARMACIE:
•	RICERCA PER REGIONE:   
[Authorize]
    [HttpGet]
    public IActionResult SearchByRegione()
    {
        return View();
    }
    [Authorize]
    [HttpPost]
    public async Task<IActionResult> SearchByRegione(string regione)
    {
        var farmacie = await _context.Farmacies
            .Include(f => f.IdComuneNavigation)
            .ThenInclude(c => c.IdProvinciaNavigation)
            .ThenInclude(p => p.IdRegioneNavigation)
            .Where(f => f.IdComuneNavigation.IdProvinciaNavigation.IdRegioneNavigation.Denominazione == regione)
            .ToListAsync();
 
        return View("Index", farmacie);
    }
•	RICERCA PER PROVINCIA:   
    [Authorize]
    [HttpGet]
    public IActionResult SearchByProvincia()
    {
        return View();
    }
 
    [Authorize]
    [HttpPost]
    public async Task<IActionResult> SearchByProvincia(string provincia)
    {
        var farmacie = await _context.Farmacies
            .Include(f => f.IdComuneNavigation)
            .ThenInclude(c => c.IdProvinciaNavigation)
            .ThenInclude(p => p.IdRegioneNavigation)
            .Where(f => f.IdComuneNavigation.IdProvinciaNavigation.Denominazione == provincia)
            .ToListAsync();
 
        return View("Index", farmacie);
    }
•	RICERCA PER COMUNE:   
    [Authorize]
    [HttpGet]
    public IActionResult SearchByComune()
    {
        return View();
    }
 
    [Authorize]
    [HttpPost]
    public async Task<IActionResult> SearchByComune(string comune)
    {
        var farmacie = await _context.Farmacies
            .Include(f => f.IdComuneNavigation)
            .ThenInclude(c => c.IdProvinciaNavigation)
            .ThenInclude(p => p.IdRegioneNavigation)
            .Where(f => f.IdComuneNavigation.Denominazione == comune)
            .ToListAsync();
 
        return View("Index", farmacie);
    }
•	RICERCA PER NOME FARMACIA:   
    [Authorize]
    [HttpGet]
    public IActionResult RicercaNome ()
    {
        return View();
    }
 
    [Authorize]
    [HttpPost]
    public async Task<IActionResult> RicercaNome (string denominazione)
    {
        var farmacie = await _context.Farmacies
            .Include(f => f.IdComuneNavigation)
            .ThenInclude(c => c.IdProvinciaNavigation)
            .ThenInclude(p => p.IdRegioneNavigation)
            .Where(f => f.Descrizionefarmacia.Contains(denominazione))
            .ToListAsync();
 
        return View("Index", farmacie);
    }
}
PER OGNI API BISOGNA AVERE LA VISTA, IN QUESTO CASO 5 VISTE PER OGNI CONTROLLER,UNA VISTA PER CERCA NOME,UNA PER FARMACIA ECC….
7)Queste viste vanno create dentro la cartella Views/Farmacie:
Esempio di vista per ricerca nome: 
@{
    ViewData["Title"] = "Ricerca per Denominazione";
}
 
<h1>@ViewData["Title"]</h1>
 
<form asp-action="RicercaNome" method="post">
<div class="form-group">
<label for="denominazione">Denominazione:</label>
<input type="text" class="form-control" id="denominazione" name="denominazione" />
</div>
<button type="submit" class="btn btn-primary">Cerca</button>
</form>

8)DOPO QUESTO SI METTONO I PERMESSI, SI FA TUTTO NEL PROGRAM,SI ASSEGNANO DEI RUOILI GIA NEL PROGRAM CON EMAIL E PASSWORD GIA’. 
 COSI’ SI CREANO I TRE RUOLI:
using (var scope = app.Services.CreateScope())
{ 
    var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
 
    var roles = new[] { "Admin", "Manager", "User" };
 
    foreach (var role in roles)
    {
        if (!await roleManager.RoleExistsAsync(role))
            await roleManager.CreateAsync(new IdentityRole(role));
    }
 
}
PER CREARE UN UTENTE ‘Admin ‘:
using (var scope = app.Services.CreateScope())
{
    var userManager = scope.ServiceProvider.GetRequiredService<UserManager<IdentityUser>>();
    
    string email = "admin@admin.com";
    string password = "Tango.gay15,";
 
    if (await userManager.FindByEmailAsync(email) == null)
    {
        var user = new IdentityUser();
        user.UserName = email;
        user.Email = email;
        user.EmailConfirmed = true;
 
        await userManager.CreateAsync(user, password);
 
        await userManager.AddToRoleAsync(user, "Admin");
    }
}






 
builder.Services.AddDefaultIdentity<IdentityUser>(options => options.SignIn.RequireConfirmedAccount = true)
    .AddRoles<IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>();
builder.Services.AddControllersWithViews();





9)PER RICERCA CON MENU A TENDINA(IN QUESTO CASO TUTTI I CAP)
AGGIUNGERE ALLA VIEW:<form method="get"  asp-action="Index">
    <label for="searchCap">Cerca per CAP:</label>
    <select name="searchCap" id="searchCap">
        <option value="">Tutti</option> <!-- Per mostrare tutte le opzioni -->
        @foreach (var item in ViewBag.Caps)
        {
            <option value="@item">@item</option>
        }
    </select>
    <input type="submit" value="Cerca" />
</form>

CAMBIARE L'INDEX NEL CONTROLLER:
        // GET: Farmacie
        public async Task<IActionResult> Index(string? searchCap)
        {
            ViewBag.Caps = _context.Farmacies.Select(f => f.Cap).Distinct().OrderBy(c => c).ToList();

            if (searchCap != null)
                return _context.Farmacies != null ?
                        View(await _context.Farmacies.Where(f => f.Cap.Contains(searchCap)).Include(f => f.IdComuneNavigation).ToListAsync()) :
                        Problem("Entity set 'YourDbContext.Farmacies' is null.");

            return _context.Farmacies != null ?
                        View(await _context.Farmacies.Include(f => f.IdComuneNavigation).ToListAsync()) :
                        Problem("Entity set 'YourDbContext.Farmacies' is null.");
        }

